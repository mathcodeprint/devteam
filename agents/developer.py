from .base import BaseAgent
import os
import re

class DeveloperAgent(BaseAgent):
    def __init__(self, name, role, skills, description, specialization, project_dir):
        super().__init__(name, role, skills, description, project_dir)
        self.specialization = specialization
        self.src_dir = os.path.join(project_dir, "src")
        os.makedirs(self.src_dir, exist_ok=True)

    def perform_task(self, task):
        """Generate code using the local AI model."""
        print(f"{self.name} (Role: {self.role}) working on task: {task['description']} ({self.description})")
        
        function_name = task.get("function_name", "example_function")
        return_value = task.get("return_value", "")
        prompt = (
            f"Generate a Python function named '{function_name}' that returns the string '{return_value}'. "
            f"The function should be simple and focused on the task: {task['description']}. "
            "Provide only the function code, no additional explanations or comments."
        )
        
        # Call the local model
        code = self.call_local_model(prompt)
        if not code:
            print(f"{self.name} failed to generate code for task {task['description']}")
            return
        
        # Filter out <think> tags and non-Python code
        code = re.sub(r'<think>[\s\S]*?</think>', '', code, flags=re.IGNORECASE)
        # Extract only Python function/class definitions and related code
        code_blocks = re.findall(r'((?:def |class )[\s\S]+?)(?=^def |^class |\Z)', code, flags=re.MULTILINE)
        filtered_code = '\n\n'.join(block.strip() for block in code_blocks if block.strip())
        if not filtered_code:
            # Fallback: if nothing matched, just try to extract code-like lines
            filtered_code = '\n'.join(line for line in code.splitlines() if line.strip() and not line.strip().startswith('#'))
        
        # Write the filtered code to file
        output_file = os.path.join(self.src_dir, f"{function_name}_{self.name}.py")
        with open(output_file, "w") as f:
            f.write(f"# Task: {task['description']}\n")
            f.write(f"# Generated by {self.name} ({self.description})\n")
            f.write(filtered_code.strip() + "\n")

        self.coordinate(task)

    def coordinate(self, task):
        """Check compatibility with other developers."""
        messages = self.receive_messages()
        for msg in messages:
            if msg["sender"] != self.name:
                print(f"{self.name} received coordination message from {msg['sender']}: {msg['message']}")
        
        coordination_msg = {
            "task_id": task["id"],
            "description": f"{self.name} completed {task['description']}. Check compatibility."
        }
        self.send_message("Dev1", coordination_msg)
        self.send_message("Dev2", coordination_msg)
        self.send_message("Tester1", coordination_msg)  # Notify tester
